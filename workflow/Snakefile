
from collections import defaultdict

def read_groups(glob):
    reads ,= glob_wildcards(glob)
    groups = {}
    for read in reads:
        group_name, lane = read.rsplit('_', 1)
        groups[read] = group_name
    return groups

paired = read_groups("rnaseq/paired/{reads}_1.fq.gz")
single = read_groups("rnaseq/single/{reads}_R1_001.fastq.gz")
contam ,= glob_wildcards("contamination/{query}.fna")
vir_clades ,= glob_wildcards("viral_elements/{clade}.gff3")
species ,= glob_wildcards("databases/uniprot/species/{species}.fasta")
ref_species ,= glob_wildcards("references/{species}.faa")

eggnog_taxid = 33090
eggnog_lineage = "Viridiplantae"
busco_lineage = "chlorophyta_odb10"
genus_species = "Cymbomonas tetramitiformis"
strain = "PLY_AMNH"

rule all:
    input:
        "analysis/funannotate/results"

rule star_index:
    input:
        "analysis/assembly/genome.fa"
    output:
        directory("analysis/star/genome")
    conda:
        "envs/star.yaml"
    shell:
        "STAR --genomeSAindexNbases 10 --runMode genomeGenerate --genomeFastaFiles {input} --genomeDir {output}"

rule star_map_single:
    input:
        index = "analysis/star/genome",
        reads = expand("analysis/rnaseq/trimmed/single/{reads}_R1_001_trimmed.fq.gz", reads = single.keys())
    output:
        "analysis/star/single.Aligned.sortedByCoord.out.bam"
    params:
        prefix = "analysis/star/single",
        reads = lambda w, input: ','.join(input.reads),
        groups = lambda w: ' , '.join([ "ID:" + x for x in single.values() ])
    conda:
        "envs/star.yaml"
    threads:
        20
    shell:
        "STAR --runThreadN {threads} --genomeDir {input.index} --readFilesCommand zcat --readFilesIn {params.reads} --outSAMattrRGline {params.groups} --outFileNamePrefix {params.prefix}. --outSAMtype BAM SortedByCoordinate"

rule star_map_paired:
    input:
        index = "analysis/star/genome",
        left  = expand("analysis/rnaseq/trimmed/paired/{reads}_{side}_val_{side}.fq.gz", reads = paired.keys(), side = 1),
        right = expand("analysis/rnaseq/trimmed/paired/{reads}_{side}_val_{side}.fq.gz", reads = paired.keys(), side = 2)
    output:
        "analysis/star/paired.Aligned.sortedByCoord.out.bam"
    params:
        prefix = "analysis/star/paired",
        left = lambda w, input: ','.join(input.left),
        right = lambda w, input: ','.join(input.right),
        groups = lambda w: ' , '.join([ "ID:" + x for x in paired.values() ])
    conda:
        "envs/star.yaml"
    threads:
        20
    shell:
        "STAR --runThreadN {threads} --genomeDir {input.index} --readFilesCommand zcat --readFilesIn {params.left} {params.right} --outSAMattrRGline {params.groups} --outFileNamePrefix {params.prefix}. --outSAMtype BAM SortedByCoordinate"

rule trim_paired:
    input:
        "rnaseq/paired/{reads}_1.fq.gz",
        "rnaseq/paired/{reads}_2.fq.gz"
    output:
        "analysis/rnaseq/trimmed/paired/{reads}_1_val_1.fq.gz",
        "analysis/rnaseq/trimmed/paired/{reads}_2_val_2.fq.gz"
    params:
        dirname = "analysis/rnaseq/trimmed/paired"
    conda:
        "envs/trim_galore.yaml"
    shell:
        "trim_galore --paired {input} -o {params.dirname}"

rule trim_single:
    input:
        "rnaseq/single/{reads}_R1_001.fastq.gz"
    output:
        "analysis/rnaseq/trimmed/single/{reads}_R1_001_trimmed.fq.gz"
    params:
        dirname = "analysis/rnaseq/trimmed/single"
    shell:
        "trim_galore {input} -o {params.dirname}"

rule miniprot_index:
    input:
        "analysis/assembly/genome.fa"
    output:
        "analysis/assembly/genome.fa.mpi"
    conda:
        "envs/miniprot.yaml"
    threads:
        10
    shell:
        "miniprot -t{threads} -d {output} {input}"

rule miniprot:
    input:
        db = "analysis/assembly/genome.fa.mpi",
        query = "references/{species}.faa"
    output:
        "analysis/miniprot/references/{species}.gff"
    log:
        "analysis/miniprot/references/{species}.gff.log"
    conda:
        "envs/miniprot.yaml"
    threads:
        5
    shell:
        "miniprot -t{threads} --gff {input.db} {input.query} > {output} 2> {log}"

rule miniprot_mrna:
    input:
        expand("analysis/miniprot/references/{species}.gff", species = ref_species)
    output:
        "analysis/miniprot/references-mrna.gff"
    params:
        ident = 0.5
    conda:
        "envs/tools.yaml"
    shell:
        "cat {input} | filter-gff values --str-eq feat_type:mRNA --num-ge Identity:{params.ident} > {output}"

rule miniprot_mapped:
    input:
        gff = "analysis/miniprot/references-mrna.gff",
        query = expand("references/{species}.faa", species = ref_species)
    output:
        "analysis/miniprot/references.faa"
    conda:
        "envs/tools.yaml"
    shell:
        "get-gff-info mongodb {input.gff} | jq -r .Target | cut -f1 -d' ' | uniq | seqkit grep -f- {input.query} | seqkit seq -i -o {output}"

rule miniprot_cdhit:
    input:
        "analysis/miniprot/references.faa"
    output:
        "analysis/miniprot/references.cdhit"
    log:
        "analysis/miniprot/references.cdhit.log"
    params:
        c = 0.9
    conda:
        "envs/tools.yaml"
    shell:
        "cdhit -d 0 -c {params.c} -i {input} -o {output} 2> {log}"

rule miniprot_bed:
    input:
        "analysis/miniprot/references-mrna.gff"
    output:
        "analysis/miniprot/references-mrna.gff.bed"
    conda:
        "envs/tools.yaml"
    shell:
        "bedtools sort -i {input} | bedtools merge > {output}"

rule link_genome:
    input:
        "assembly"
    output:
        "analysis/assembly/genome.fa"
    shell:
        "ln -rs {input}/* {output}"

rule red:
    input:
        "analysis/assembly/genome.fa"
    output:
        sco = "analysis/red/sco/genome.scr",
        cnd = "analysis/red/cnd/genome.cnd",
        rpt = "analysis/red/rpt/genome.bed",
        msk = "analysis/red/msk/genome.msk",
        tbl = "analysis/red/red.tbl",
        hmm = "analysis/red/red.hmm"
    params:
        genome = "analysis/assembly",
        scodir = "analysis/red/sco",
        cnddir = "analysis/red/cnd",
        rptdir = "analysis/red/rpt",
        mskdir = "analysis/red/msk"
    conda:
        "envs/red.yaml"
    shell:
        """
        mkdir -p {params.scodir} {params.cnddir} {params.rptdir} {params.mskdir}
        Red -gnm {params.genome} -tbl {output.tbl} -hmo {output.hmm} -sco {params.scodir} -cnd {params.cnddir} -rpt {params.rptdir} -msk {params.mskdir} -frm 2
        """

rule makeblastdb:
    input:
        "analysis/assembly/genome.fa"
    output:
        "analysis/assembly/genome.fa.ndb"
    conda:
        "envs/blast.yaml"
    shell:
        "makeblastdb -in {input} -dbtype nucl"

rule blast_contam:
    input:
        db = "analysis/assembly/genome.fa",
        ndb = "analysis/assembly/genome.fa.ndb",
        query = "contamination/{query}.fna"
    output:
        "analysis/contamination/{query}.blast6"
    params:
        evalue = 1e-20
    conda:
        "envs/blast.yaml"
    shell:
        "blastn -query {input.query} -db {input.db} -evalue {params.evalue} -outfmt 6 -out {output}"

rule bed_contam:
    input:
        "analysis/contamination/{query}.blast6"
    output:
        "analysis/contamination/{query}.blast6.gff"
    conda:
        "envs/tools.yaml"
    shell:
        "csvcut -t -c2,1,3-6,9,10,7,8,11,12 {input} | csvformat -T | blast2gff blastdb -n > {output}"

rule mask_bed:
    input:
        assembly = "analysis/assembly/genome.fa",
        red_bed  = "analysis/red/rpt/genome.bed",
        homologs = "analysis/miniprot/references-mrna.gff.bed",
        viruses  = expand("viral_elements/{clade}.gff3", clade = vir_clades),
        contam   = expand("analysis/contamination/{query}.blast6.gff", query = contam)
    output:
        "analysis/mask/masked.bed"
    conda:
        "envs/tools.yaml"
    shell:
        """
        bedtools merge \
                -i <(bedtools subtract -a {input.red_bed} -b {input.homologs}) \
                -i <(cat {input.contam}  | bedtools sort) \
                -i <(cat {input.viruses} | bedtools sort) \
        > {output}
        """

rule mask_fasta:
    input:
        fasta = "analysis/assembly/genome.fa",
        bed = "analysis/mask/masked.bed"
    output:
        "analysis/mask/masked.fasta"
    conda:
        "envs/tools.yaml"
    shell:
        "bedtools maskfasta -soft -fi {input.fasta} -bed {input.bed} -fo {output}"

rule braker:
    input:
        masked = "analysis/mask/masked.fasta",
        paired = "analysis/star/paired.Aligned.sortedByCoord.out.bam",
        single = "analysis/star/single.Aligned.sortedByCoord.out.bam",
        homologs = "analysis/miniprot/references.cdhit"
    output:
        "analysis/braker/braker.gtf",
        "analysis/braker/braker.aa"
    log:
        "analysis/braker/braker.log"
    params:
        species = "genome_red_subtract",
        dirname = "analysis/braker",
        gc_prob = 0.05
    singularity:
        "docker://teambraker/braker3"
    shell:
        "braker.pl --genome {input.masked} --species {params.species} --bam {input.paired},{input.single} --prot_seq {input.homologs} --workingdir {params.dirname} --threads 1 --softmasking --gc_probability {params.gc_prob} &> {log}"

rule gtf_to_gff:
    input:
        "analysis/braker/braker.gtf"
    output:
        "analysis/braker/braker.gff"
    shadow:
        "minimal"
    singularity:
        "docker://teambraker/braker3"
    shell:
        """
        python fix_gtf_ids.py --gtf {input} --out fixed.gtf
        gffread fixed.gtf -o {output}
        """

rule trna:
    input:
        "analysis/assembly/genome.fa"
    output:
        tab = "analysis/ncrna/trna.tab",
        sec = "analysis/ncrna/trna.sec"
    log:
        "analysis/ncrna/trna.log"
    conda:
        "envs/trnascan.yaml"
    shell:
        "tRNAscan-SE -o {output.tab} -f {output.sec} {input} &> {log}"

rule rrna:
    input:
        fasta = "analysis/assembly/genome.fa",
        cm = "databases/Rfam/Rfam.cm",
        clanin = "databases/Rfam/Rfam.clanin"
    output:
        txt = "analysis/ncrna/rrna.txt",
        tblout = "analysis/ncrna/rrna.tblout"
    log:
        "analysis/ncrna/rrna.log"
    conda:
        "envs/infernal.yaml"
    threads:
        4
    shell:
        "cmscan --cpu {threads} --cut_ga --rfam --nohmmonly --clanin {input.clanin} --oskip --fmt 2 -o {output.txt} --tblout {output.tblout} databases/Rfam/Rfam.cm {input.fasta} &> {log}"

# NB: not used
rule busco:
    input:
        "analysis/braker/braker.aa"
    output:
        "analysis/busco/run_{lineage}/full_table.tsv",
        "analysis/busco/short_summary.specific.{lineage}.busco.txt",
        directory("analysis/busco/logs_{lineage}"),
        directory("analysis/busco/run_{lineage}/busco_sequences/single_copy_busco_sequences/")
    params:
        dir = "analysis/busco"
    shadow:
        "minimal"
    conda:
        "envs/busco.yaml"
    threads:
        10
    shell:
        """
        busco --lineage_dataset {wildcards.lineage} -f -i {input} -o busco -m protein -c {threads}
        mv busco/logs busco/logs_{wildcards.lineage}
        rsync -qav busco/ {params.dir}
        """

# NB: not used
rule proteinortho:
    input:
        expand("analysis/species/{species}.fasta", species = species)
    output:
        "analysis/proteinortho/proteinortho.proteinortho.tsv"
    shadow:
        "minimal"
    params:
        dir = "analysis/proteinortho",
        evalue = 1e-5
    threads:
        30
    conda:
        "envs/proteinortho.yaml"
    shell:
        """
        proteinortho -project=proteinortho -cpus={threads} -e={params.evalue} {input}
        mv proteinortho.* {params.dir}
        """

rule dload_eggnog:
    output:
        "analysis/eggnog/data/eggnog.db"
    params:
        taxid = eggnog_taxid,
        dbname = eggnog_lineage
    conda:
        "envs/eggnog.yaml"
    shell:
        "download_eggnog_data.py -y -d {params.taxid} --dbname {params.dbname} --data_dir $(dirname {output})"

rule eggnog:
    input:
        db = "analysis/eggnog/data/eggnog.db",
        faa = "analysis/braker/braker.aa"
    output:
        "analysis/eggnog/emapper/eggnog.emapper.annotations"
    conda:
        "envs/eggnog.yaml"
    threads:
        20
    shell:
        "emapper.py --cpu {threads} -o eggnog -i {input.faa} --data_dir $(dirname {input.db}) -m diamond --output_dir $(dirname {output})"

rule interproscan:
    input:
        "analysis/braker/braker.aa"
    output:
        "analysis/interproscan/braker.aa.xml"
    params:
        dir = "analysis/interproscan"
    threads:
        20
    shell:
        "interproscan.sh -i {input} -d {params.dir} -cpu {threads}"

rule funannotate_setup:
    output:
        directory("analysis/funannotate/data")
    log:
        "analysis/funannotate/funannotate-setup.log"
    params:
        lineage = busco_lineage,
        host_dir = "https://busco-data.ezlab.org/v5/data/lineages/"
    shadow:
        "minimal"
    conda:
        "envs/funannotate.yaml"
    shell:
        """
        funannotate setup -w -d {output}
        mv funannotate-setup.log {log}
        wget -r -np -nH -e robots=off --cut-dirs=5 -A '{params.lineage}.*.tar.gz' {params.host_dir}
        tar xfz {params.lineage}.*.tar.gz -C {output}/
        """

rule funannotate:
    input:
        iprscan = "analysis/interproscan/braker.aa.xml",
        eggnog = "analysis/eggnog/emapper/eggnog.emapper.annotations",
        data = "analysis/funannotate/data",
        gff = "analysis/braker/braker.gff",
        fasta = "analysis/assembly/genome.fa"
    output:
        directory("analysis/funannotate/results")
    log:
        "analysis/funannotate/funannotate-annotate.log"
    params:
        species = genus_species,
        strain = strain,
        lineage = busco_lineage
    conda:
        "envs/funannotate.yaml"
    threads:
        10
    shell:
        "funannotate annotate --fasta {input.fasta} --gff {input.gff} -d {input.data} --species {params.species} --strain {params.strain} --busco_db {params.lineage} --eggnog {input.eggnog} --iprscan {input.iprscan} -o {output} --cpus {threads} --rename &> {log}"
