
from collections import defaultdict

def read_groups(glob):
    reads ,= glob_wildcards(glob)
    groups = {}
    for read in reads:
        group_name, lane = read.rsplit('_', 1)
        groups[read] = group_name
    return groups

paired = read_groups("rnaseq/paired/{reads}_1.fq.gz")
single = read_groups("rnaseq/single/{reads}_R1_001.fastq.gz")

rule all:
    input:
        "analysis/references/homologs.cdhit",
        "analysis/star/paired.Aligned.sortedByCoord.out.bam",
        "analysis/star/single.Aligned.sortedByCoord.out.bam"

rule get_homologs:
    input:
        "references"
    output:
        directory("analysis/references/homologs")
    params:
        min_taxa = 3,
        ident = 60
    shadow:
        "minimal"
    conda:
        "envs/get_homologs.yaml"
    threads:
        40
    shell:
        "get_homologues.pl -M -t {params.min_taxa} -d {input} -n {threads} -X -S {params.ident} && mv {input}_homologues {output}"

rule star_index:
    input:
        "assembly/genome.fasta"
    output:
        directory("analysis/star/genome")
    conda:
        "envs/star.yaml"
    shell:
        "STAR --genomeSAindexNbases 10 --runMode genomeGenerate --genomeFastaFiles {input} --genomeDir {output}"

rule star_map_single:
    input:
        index = "analysis/star/genome",
        reads = expand("analysis/rnaseq/trimmed/single/{reads}_R1_001_trimmed.fq.gz", reads = single.keys())
    output:
        "analysis/star/single.Aligned.sortedByCoord.out.bam"
    params:
        prefix = "analysis/star/single",
        reads = lambda w, input: ','.join(input.reads),
        groups = lambda w: ' , '.join([ "ID:" + x for x in single.values() ])
    conda:
        "envs/star.yaml"
    threads:
        workflow.cores
    shell:
        "STAR --runThreadN {threads} --genomeDir {input.index} --readFilesCommand zcat --readFilesIn {params.reads} --outSAMattrRGline {params.groups} --outFileNamePrefix {params.prefix}. --outSAMtype BAM SortedByCoordinate"

rule star_map_paired:
    input:
        index = "analysis/star/genome",
        left  = expand("analysis/rnaseq/trimmed/paired/{reads}_{side}_val_{side}.fq.gz", reads = paired.keys(), side = 1),
        right = expand("analysis/rnaseq/trimmed/paired/{reads}_{side}_val_{side}.fq.gz", reads = paired.keys(), side = 2)
    output:
        "analysis/star/paired.Aligned.sortedByCoord.out.bam"
    params:
        prefix = "analysis/star/paired",
        left = lambda w, input: ','.join(input.left),
        right = lambda w, input: ','.join(input.right),
        groups = lambda w: ' , '.join([ "ID:" + x for x in paired.values() ])
    conda:
        "envs/star.yaml"
    threads:
        workflow.cores
    shell:
        "STAR --runThreadN {threads} --genomeDir {input.index} --readFilesCommand zcat --readFilesIn {params.left} {params.right} --outSAMattrRGline {params.groups} --outFileNamePrefix {params.prefix}. --outSAMtype BAM SortedByCoordinate"

rule trim_paired:
    input:
        "rnaseq/paired/{reads}_1.fq.gz",
        "rnaseq/paired/{reads}_2.fq.gz"
    output:
        "analysis/rnaseq/trimmed/paired/{reads}_1_val_1.fq.gz",
        "analysis/rnaseq/trimmed/paired/{reads}_2_val_2.fq.gz"
    params:
        dirname = "analysis/rnaseq/trimmed/paired"
    conda:
        "envs/trim_galore.yaml"
    shell:
        "trim_galore --paired {input} -o {params.dirname}"

rule trim_single:
    input:
        "rnaseq/single/{reads}_R1_001.fastq.gz"
    output:
        "analysis/rnaseq/trimmed/single/{reads}_R1_001_trimmed.fq.gz"
    params:
        dirname = "analysis/rnaseq/trimmed/single"
    shell:
        "trim_galore {input} -o {params.dirname}"

rule cat_homologs:
    input:
        "analysis/references/homologs"
    output:
        "analysis/references/homologs.faa"
    conda:
        "envs/tools.yaml"
    shell:
        "find {input} -name '*.faa' | xargs cat > {output}"

rule cdhit_homologs:
    input:
        "analysis/references/homologs.faa"
    output:
        "analysis/references/homologs.cdhit"
    params:
        c = 0.9
    conda:
        "envs/tools.yaml"
    shell:
        "cdhit -i {input} -o {output} -c {params.c} -d 0"

rule bastx_homologs:
    input:
        homologs = "analysis/references/homologs.cdhit",
        assembly = "assembly/genome.fasta"
    output:
        "analysis/references/homologs.outfmt6"
    params:
        evalue = 1e-10
    conda:
        "envs/diamond.yaml"
    threads:
        20
    shell:
        "diamond blastx -k 100000 --max-hsps 100000 --query {input.assembly} --db {input.homologs} --outfmt 6 --out {output} --threads {threads} --evalue {params.evalue}"

rule red:
    input:
        "assembly/genome.fasta"
    output:
        tbl = directory("analysis/red/tbl"),
        sco = directory("analysis/red/sco"),
        cnd = directory("analysis/red/cnd"),
        rpt = directory("analysis/red/rpt"),
        msk = directory("analysis/red/msk"),
        hmm = "analysis/red/red.hmm"
    params:
        dirname = "analysis/red"
    shadow:
        "minimal"
    conda:
        "envs/red.yaml"
    shell:
        """
        mkdir -p {output.tbl} {output.sco} {output.cnd} {output.rpt} {output.msk}
        ln -s {input} genome.fa
        Red -gnm . -tbl {output.tbl} -sco {output.sco} -cnd {output.cnd} -rpt {output.rpt} -msk {output.msk} -frm 2 -hmo {output.hmm}
        """

rule mask:
    input:
        assembly = "assembly/genome.fasta"
        rpt = "analysis/red/rpt",
        blastx = "analysis/references/homologs.outfmt6",
        viruses = "viral_elements"
    output:
        "analysis/assembly/masked.fasta"
    shell:
        ""

rule braker:
    input:
        masked = "analysis/assembly/masked.fasta",
        mask = "analysis/mask/merged",
        bam = [ "analysis/star/paired.Aligned.sortedByCoord.out.bam", "analysis/star/single.Aligned.sortedByCoord.out.bam" ],
        homologs = "analysis/references/homologs.cdhit"
    output:
        ""
    params:
        species = "genome_red_subtract",
        gc_prob = 0.05
    conda:
        "envs/braker2.yaml"
    threads:
        20
    shell:
        "braker --genome {input.masked} --species {params.species} --bam {input.bam} --prot_seq {input.homologs} --etpmode --cores {threads} --addUTR on --softmasking --gc_probability {params.gc_prob}"
